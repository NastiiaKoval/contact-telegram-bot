import os
import asyncio
import datetime
import random
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Application, MessageHandler, filters


# üîê Token —ñ –¥–æ–∑–≤—ñ–ª —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É https://t.me/contact_academy

import os
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env

BOT_TOKEN = os.getenv('BOT_TOKEN')
ALLOWED_USER_ID = int(os.getenv('ALLOWED_USER_ID'))  # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ int, –±–æ ID —á–∏—Å–ª–æ


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ start
async def handle_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id != ALLOWED_USER_ID:
        await update.message.reply_text("üôÉ –£–ø—Å! –õ–∏—à–µ –æ–±—Ä–∞–Ω—ñ –º–∞—é—Ç—å —Å–∏–ª—É –∫–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏–º –±–æ—Ç–æ–º –ê–∫–∞–¥–µ–º—ñ—ó CONTACT ü§ñ.")
        return

    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é, –∑—Ä–æ–±–∏–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?\n–Ø–∫—â–æ —Ç–∞–∫ ‚Äî –Ω–∞—Ç–∏—Å–∫–∞–π –∫–æ–º–∞–Ω–¥—É /send"
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ getid
async def get_chat_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–∞–º–µ —Ç–∏
    if user_id != ALLOWED_USER_ID:
        await update.message.reply_text("üôÉ –£–ø—Å! –õ–∏—à–µ –æ–±—Ä–∞–Ω—ñ –º–∞—é—Ç—å —Å–∏–ª—É –∫–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏–º –±–æ—Ç–æ–º –ê–∫–∞–¥–µ–º—ñ—ó CONTACT ü§ñ.")
        return

    chat = update.effective_chat
    chat_title = chat.title or chat.full_name or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    chat_id = chat.id

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–æ–±—ñ –æ—Å–æ–±–∏—Å—Ç–æ
    await context.bot.send_message(
        chat_id=ALLOWED_USER_ID,
        text=f"üîç –ù–∞–∑–≤–∞ —á–∞—Ç—É: {chat_title}\nüÜî Chat ID: {chat_id}"
    )



# üìÖ –ì—Ä—É–ø–∏ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º
groups = [
    # –í—ñ–≤—Ç–æ—Ä–æ–∫ (1)
    {"chat_id": "-1001923361033", "weekday": 6, "lesson_time": "10:00"},  # —Ç–µ—Å—Ç–æ–≤–∏–π
    {"chat_id": "-1002473135036", "weekday": 1, "lesson_time": "16:00"},  # –í–¢ 16:00
    {"chat_id": "-1002261828597", "weekday": 1, "lesson_time": "17:10"},  # –í–¢ 17:10
    {"chat_id": "-1002214877213", "weekday": 1, "lesson_time": "17:10"},  # –í–¢ 17:10

    # –ß–µ—Ç–≤–µ—Ä (3)
    {"chat_id": "-1002414786164", "weekday": 3, "lesson_time": "16:00"},  # –ß–¢ 16:00
    {"chat_id": "-1001992761373", "weekday": 3, "lesson_time": "17:10"},  # –ß–¢ 17:10
    {"chat_id": "-1002858419719", "weekday": 3, "lesson_time": "18:00"},  # –ß–¢ 18:00

    # –°—É–±–æ—Ç–∞ (5)
    {"chat_id": "-1001981833432", "weekday": 5, "lesson_time": "10:00"},  # –°–ë 10:00
    {"chat_id": "-1002170222087", "weekday": 5, "lesson_time": "11:15"},  # –°–ë 11:15
    {"chat_id": "-1002012663874", "weekday": 5, "lesson_time": "12:30"},  # –°–ë 12:30
    {"chat_id": "-1002021626621", "weekday": 5, "lesson_time": "15:00"},  # –°–ë 15:00
    {"chat_id": "-1002193917570", "weekday": 5, "lesson_time": "15:00"},  # –°–ë 15:00 (—ñ–≥—Ä–∏)

    # –ù–µ–¥—ñ–ª—è (6)
    {"chat_id": "-1002046960642", "weekday": 6, "lesson_time": "10:00"},  # –ù–î 10:00
    {"chat_id": "-1002193782836", "weekday": 6, "lesson_time": "10:00"},  # –ù–î 10:00 (–∞–Ω—ñ–º–∞—Ü—ñ—è)
    {"chat_id": "-1002245783127", "weekday": 6, "lesson_time": "12:30"},  # –ù–î 12:30 (3D-–º–æ–¥)
    {"chat_id": "-1001953194411", "weekday": 6, "lesson_time": "12:30"},  # –ù–î 12:30
    {"chat_id": "-1001722600792", "weekday": 6, "lesson_time": "15:00"},  # –ù–î 15:00
    {"chat_id": "-1001722769204", "weekday": 6, "lesson_time": "17:30"},  # –ù–î 17:30
]

# –®–∞–±–ª–æ–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
greetings = [
    "–ü—Ä–∏–≤—ñ—Ç–∏–∫–∏, –¥—Ä—É–∑—ñ! üêº", "–ü—Ä–∏–≤—ñ—Ç–∏–∫–∏! üëã",
    "–í—ñ—Ç–∞–Ω–Ω—è, –¥—Ä—É–∑—ñ! üòç", "–°–∞–ª—é—Ç!‚ú®", "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?üôÇ", "–î–æ–±—Ä–∏–¥–µ–Ω—å!‚òÄÔ∏è"
]
bottoms = [
    "–ë–∞–∂–∞—î–º–æ –∑–∞—Ç–∏—à–Ω–æ–≥–æ –¥–Ω—è!‚òïÔ∏è", "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è —Ç–∞ –ø—Ä–∏—î–º–Ω–∏—Ö –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ–∫! üéÅ",
    "–ë–∞–∂–∞—î–º–æ –≤–¥–∞–ª–æ–≥–æ –¥–Ω—è üåü ", "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!üíú", "–ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ –¥–Ω—è!üåª"
]
stickers = ["üìí", "üòé", "üë©‚ÄçüöÄ", "üìö", "üçÄ", "üåà", 'üìå',
            'üåº', '‚ö°Ô∏è', 'üëâ', 'üëÄ', 'üßë‚Äçüíª', 'üêà', 'üò∫', 'üõã', 'üéÄ', 'ü©µ', 'üìò']


# üì¨ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
months_ukr = {
    1: "—Å—ñ—á–Ω—è", 2: "–ª—é—Ç–æ–≥–æ", 3: "–±–µ—Ä–µ–∑–Ω—è", 4: "–∫–≤—ñ—Ç–Ω—è",
    5: "—Ç—Ä–∞–≤–Ω—è", 6: "—á–µ—Ä–≤–Ω—è", 7: "–ª–∏–ø–Ω—è", 8: "—Å–µ—Ä–ø–Ω—è",
    9: "–≤–µ—Ä–µ—Å–Ω—è", 10: "–∂–æ–≤—Ç–Ω—è", 11: "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", 12: "–≥—Ä—É–¥–Ω—è"
}

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ send
# async def send_group_reminders(bot: Bot):
#     today = datetime.datetime.now()
#     tomorrow = today + datetime.timedelta(days=1)
#     tomorrow_weekday = tomorrow.weekday()
#
#     day = tomorrow.day
#     month = months_ukr[tomorrow.month]
#     tomorrow_str = f"{day} {month}"
#
#     sent = False
#
#     for group in groups:
#         if group["weekday"] == tomorrow_weekday:
#             message = (
#                 f"{random.choice(greetings)}\n\n"
#                 f"{random.choice(stickers)} –ù–∞–≥–∞–¥—É—î–º–æ, —â–æ –∑–∞–≤—Ç—Ä–∞, {tomorrow_str}, –æ {group['lesson_time']} –º–∏ —á–µ–∫–∞—î–º–æ –≤–∞—Å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—ñ\n\n"
#                 f"{random.choice(bottoms)}"
#             )
#             await bot.send_message(chat_id=group["chat_id"], text=message)
#             print(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø—É {group['chat_id']}")
#             sent = True
#
#     return sent


# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º
sent_today_date = None

async def send_group_reminders(bot: Bot):
    global sent_today_date

    today = datetime.datetime.now().date()
    tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
    tomorrow_weekday = tomorrow.weekday()

    day = tomorrow.day
    month = months_ukr[tomorrow.month]
    tomorrow_str = f"{day} {month}"

    sent = False

    for group in groups:
        if group["weekday"] == tomorrow_weekday:
            message = (
                f"{random.choice(greetings)}\n\n"
                f"{random.choice(stickers)} –ù–∞–≥–∞–¥—É—î–º–æ, —â–æ –∑–∞–≤—Ç—Ä–∞, {tomorrow_str}, –æ {group['lesson_time']} –º–∏ —á–µ–∫–∞—î–º–æ –≤–∞—Å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—ñ\n\n"
                f"{random.choice(bottoms)}"
            )
            await bot.send_message(chat_id=group["chat_id"], text=message)
            print(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø—É {group['chat_id']}")
            sent = True

    if sent:
        sent_today_date = today  # —Ç—É—Ç –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ

    return sent

async def handle_send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sent_today_date

    user_id = update.effective_user.id

    if user_id != ALLOWED_USER_ID:
        await update.message.reply_text("üôÉ –£–ø—Å! –õ–∏—à–µ –æ–±—Ä–∞–Ω—ñ –º–∞—é—Ç—å —Å–∏–ª—É –∫–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏–º –±–æ—Ç–æ–º –ê–∫–∞–¥–µ–º—ñ—ó CONTACT ü§ñ")
        return

    today = datetime.datetime.now().date()

    if sent_today_date == today:
        await update.message.reply_text("‚ÑπÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ.")
        return

    sent = await send_group_reminders(context.bot)

    if sent:
        await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –≥—Ä—É–ø —ñ–∑ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")


# async def handle_send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.effective_user.id
#
#     if user_id != ALLOWED_USER_ID:
#         await update.message.reply_text("üôÉ –£–ø—Å! –õ–∏—à–µ –æ–±—Ä–∞–Ω—ñ –º–∞—é—Ç—å —Å–∏–ª—É –∫–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏–º –±–æ—Ç–æ–º –ê–∫–∞–¥–µ–º—ñ—ó CONTACT ü§ñ")
#         return
#
#     sent = await send_group_reminders(context.bot)
#
#     if sent:
#         await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
#     else:
#         await update.message.reply_text("‚ÑπÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –≥—Ä—É–ø —ñ–∑ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")

# –ª–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
# async def main():
#     app = ApplicationBuilder().token(BOT_TOKEN).build()
#     app.add_handler(CommandHandler("start", handle_start_command))
#     app.add_handler(CommandHandler("send", handle_send_command))
#     app.add_handler(CommandHandler("getid", get_chat_id_handler))
#     print("""ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ù–∞–ø–∏—à–∏ /start –∞–±–æ /send —É Telegram.
#     P.S –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É getid –≤ —á–∞—Ç–∞—Ö, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ id —á–∞—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –π–æ–≥–æ –¥–æ –∫–æ–¥—É""")
#     await app.run_polling()


# –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä
# async def main():
#     app = Application.builder().token(BOT_TOKEN).build()
#
#     # –î–æ–¥–∞—î–º–æ —Ç–≤–æ—ó —Ö–µ–Ω–¥–ª–µ—Ä–∏ —Ç—É—Ç...
#     app.add_handler(CommandHandler("start", handle_start_command))
#     app.add_handler(CommandHandler("send", handle_send_command))
#     app.add_handler(CommandHandler("getid", get_chat_id_handler))
#     # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
#
#     print("""ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ù–∞–ø–∏—à–∏ /start –∞–±–æ /send —É Telegram.
#     P.S –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É getid –≤ —á–∞—Ç–∞—Ö, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ id —á–∞—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –π–æ–≥–æ –¥–æ –∫–æ–¥—É""")
#
#     # WEBHOOK —Ä–µ–∂–∏–º –¥–ª—è Render:
#     PORT = int(os.environ.get('PORT', 8443))
#     await app.run_webhook(
#         listen="0.0.0.0",
#         port=PORT,
#         webhook_url="https://contact-telegram-bot.onrender.com/"  # <-- –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—é –∞–¥—Ä–µ—Å—É Render!
#     )

# —Å–∞–º –≤–∏–∑–Ω–∞—á–∞—î —è–∫–∏–π –∑–∞—Ä–∞–∑ –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    app.add_handler(CommandHandler("start", handle_start_command))
    app.add_handler(CommandHandler("send", handle_send_command))
    app.add_handler(CommandHandler("getid", get_chat_id_handler))

    print("""ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ù–∞–ø–∏—à–∏ /start –∞–±–æ /send —É Telegram.
    P.S –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É getid –≤ —á–∞—Ç–∞—Ö, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ id —á–∞—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –π–æ–≥–æ –¥–æ –∫–æ–¥—É""")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if os.environ.get('RENDER') == 'true':
        # –Ø–∫—â–æ –º–∏ –Ω–∞ Render ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ WEBHOOK
        PORT = int(os.environ.get('PORT', 8443))
        RENDER_EXTERNAL_URL = os.environ.get('RENDER_EXTERNAL_URL')
        await app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url="https://contact-telegram-bot.onrender.com"
        )
    else:
        # –Ü–Ω–∞–∫—à–µ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ POLLING
        await app.run_polling()

# –ó–∞–ø—É—Å–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop
import nest_asyncio
nest_asyncio.apply()

if __name__ == "__main__":
    asyncio.run(main())



